#! /usr/bin/env julia-0.6

# There are so many different configurations that I would like to use while estimating the power
# spectrum that manually managing the config files is getting out of hand. All of these files are
# therefore now generated by this script.

function main()
    # "calibrated"   => only initial gain calibration, no source removal
    # "peeled"       => initial calibration with source removal
    # "recalibrated" => recalibrated and interpolated visibilities (with source removal)
    processing = ("calibrated", "peeled", "recalibrated")

    # "all"  => all visibilities are used to estimate the m-modes
    # "odd"  => only odd-numbered visibilities are used to estimate the m-modes
    # "even" => only even-numbered visibilities are used to estimate the m-modes
    sampling   = ("all", "odd", "even")

    # "extreme"  => filter modes with (foregrounds) > 0.1 × (signal)
    # "moderate" => filter modes with (foregrounds) > (signal)
    # "mild"     => filter modes with (foregrounds) > 10 × (signal)
    filtering  = ("extreme", "moderate", "mild")

    # "spherical"   => spherically averaged power spectrum P(k)
    # "cylindrical" => cylindrically averaged power spectrum P(k⟂, k∥)
    # "angular"     => multi-frequency angular power spectrum Cl(ν1, ν2)
    estimator  = ("spherical", "cylindrical", "angular")

    for process in processing
        for sample in sampling
            create_101_average_channels_yml(process, sample)
            create_103_full_rank_compress_yml(process, sample)
            for filter in filtering
                create_112_foreground_filter_yml(process, sample, filter)
                for estimate in estimator
                    create_121_quadratic_estimator_yml(process, sample, filter, estimate)
                end
            end
        end
    end

    N = length(processing) * length(sampling) * length(filtering) * length(estimator)
    println("Generated $N power spectrum configurations.")
end

function write_header(file)
    println(file, "# This file was auto-generated. Do not edit directly!")
end

function create_101_average_channels_yml(process, sample)
    filename = "101-average-channels-m-modes-$process-$sample.yml"
    open(joinpath(@__DIR__, filename), "w") do file
        write_header(file)
        println(file, "input: 031-m-modes-$process-$sample")
        println(file, "output: 101-averaged-m-modes-$process-$sample")
        println(file, "Navg: 10")
    end
end

function create_103_full_rank_compress_yml(process, sample)
    filename = "103-full-rank-compress-$process-$sample.yml"
    open(joinpath(@__DIR__, filename), "w") do file
        write_header(file)
        println(file, "input-m-modes: 101-averaged-m-modes-$process-$sample")
        println(file, "input-transfer-matrix: 101-averaged-transfer-matrix")
        println(file, "input-noise-matrix: 102-noise-covariance-matrix-$sample")
        println(file, "output-m-modes: 103-compressed-m-modes-$process-$sample")
        println(file, "output-transfer-matrix: 103-compressed-transfer-matrix-$process-$sample")
        println(file, "output-noise-matrix: 103-compressed-noise-covariance-matrix-$process-$sample")
    end
end

function create_112_foreground_filter_yml(process, sample, filter)
    filename = "112-foreground-filter-$process-$sample-$filter.yml"
    if filter == "extreme"
        value = 0.1
    elseif filter == "moderate"
        value = 1.0
    elseif filter == "mild"
        value = 10.0
    else
        error("unknown filter")
    end
    open(joinpath(@__DIR__, filename), "w") do file
        write_header(file)
        println(file, "input-m-modes: 103-compressed-m-modes-$process-$sample")
        println(file, "input-transfer-matrix: 103-compressed-transfer-matrix-$process-$sample")
        println(file, "input-noise-matrix: 103-compressed-noise-covariance-matrix-$process-$sample")
        println(file, "input-foreground-matrix: 110-foreground-covariance-matrix")
        println(file, "input-signal-matrix: 111-signal-covariance-matrix")
        println(file, "output-m-modes: 112-filtered-m-modes-$process-$sample-$filter")
        println(file, "output-transfer-matrix: 112-filtered-transfer-matrix-$process-$sample-$filter")
        println(file, "output-covariance-matrix: 112-filtered-covariance-matrix-$process-$sample-$filter")
        println(file, "output-foreground-filter: 112-foreground-filter-$process-$sample-$filter")
        println(file, "output-noise-whitener: 112-noise-whitener-$process-$sample-$filter")
        println(file, "threshold: $value")
    end
end

function create_121_quadratic_estimator_yml(process, sample, filter, estimate)
    filename = "121-quadratic-estimator-$process-$sample-$filter-$estimate.yml"
    open(joinpath(@__DIR__, filename), "w") do file
        write_header(file)
        println(file, "input-basis: 120-basis-covariance-matrices-$estimate")
        println(file, "input-m-modes: 112-filtered-m-modes-$process-$sample-$filter")
        println(file, "input-transfer-matrix: 112-filtered-transfer-matrix-$process-$sample-$filter")
        println(file, "input-covariance-matrix: 112-filtered-covariance-matrix-$process-$sample-$filter")
        println(file, "output: 121-quadratic-estimator-$process-$sample-$filter-$estimate")
        println(file, "iterations: 1000") # number of iterations used to compute the Fisher matrix
    end
end

main()

